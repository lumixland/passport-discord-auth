"use strict";var u=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var w=Object.prototype.hasOwnProperty;var p=(a,e)=>u(a,"name",{value:e,configurable:!0});var A=(a,e)=>{for(var r in e)u(a,r,{get:e[r],enumerable:!0})},k=(a,e,r,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of D(e))!w.call(a,t)&&t!==r&&u(a,t,{get:()=>e[t],enumerable:!(s=v(e,t))||s.enumerable});return a};var R=a=>k(u({},"__esModule",{value:!0}),a);var S={};A(S,{Scope:()=>g,Strategy:()=>c});module.exports=R(S);var m=require("builder-validation"),d=require("passport-oauth2");var c=class extends d.Strategy{static{p(this,"Strategy")}name="discord";scope;scopeDelay;fetchScopeEnabled;constructor(e,r){new m.Schema().addString({name:"clientId",description:"The client ID assigned by Discord.",required:!0}).addString({name:"clientSecret",description:"The client secret assigned by Discord.",required:!0}).addString({name:"callbackUrl",description:"The URL to which Discord will redirect the user after granting authorization.",required:!0}).addArray({name:"scope",description:"An array of permission scopes to request.",required:!0}).addNumber({name:"scopeDelay",description:"The delay in milliseconds between requests for the same scope.",required:!1}).addBoolean({name:"fetchScope",description:"Whether to fetch data for the specified scope.",required:!1}).addString({name:"authorizationUrl",description:"The base URL for OAuth2 authorization.",required:!1}).addString({name:"tokenUrl",description:"The base URL for OAuth2 token issuance.",required:!1}).addString({name:"scopeSeparator",description:"The separator for the scope values.",required:!1}).validate(e).then(t=>{if(typeof t=="string")throw new Error(t)}),super({clientID:e.clientId,callbackURL:e.callbackUrl,authorizationURL:e.authorizationUrl??"https://discord.com/api/oauth2/authorize",tokenURL:e.tokenUrl??"https://discord.com/api/oauth2/token",scopeSeparator:" ",...e},r),this.scope=e.scope??[],this.scopeDelay=e.scopeDelay??0,this.fetchScopeEnabled=e.fetchScope??!0,this._oauth2.useAuthorizationHeaderforGET(!0)}userProfile(e,r){this._oauth2.get("https://discord.com/api/users/@me",e,(s,t)=>{if(s)return r(new d.InternalOAuthError("Failed to fetch the user profile.",s));let o={};try{if(typeof t!="string")return r(new Error("Failed to parse the user profile."));let i=JSON.parse(t),h=14200704e5,_=1<<22;if(o={provider:"discord",id:i.id,username:i.username,displayName:i.displayName,discriminator:i.discriminator,avatar:i.avatar,banner:i.banner,email:i.email,verified:i.verified,mfa_enabled:i.mfa_enabled,access_token:e,public_flags:i.public_flags,flags:i.flags,locale:i.locale,global_name:i.global_name,premium_type:i.premium_type,connections:i.connections,guilds:i.guilds,fetchedAt:new Date,createdAt:new Date(+i.id/_+h),_raw:t,_json:i},this.fetchScopeEnabled===!1)return r(null,o);this.fetchScope("connections",e,(l,b)=>{if(l)return r(l);o.connections=b,this.fetchScope("guilds",e,(f,y)=>{if(f)return r(f);o.guilds=y,o.fetchedAt=new Date,r(null,o)})})}catch(i){return console.error(i),r(new Error("Failed to parse the user profile."))}})}fetchScope(e,r,s){if(!this.scope.includes(e))return s(null,null);setTimeout(()=>{this._oauth2.get(`https://discord.com/api/users/@me/${e}`,r,(t,o)=>{if(t)return s(new d.InternalOAuthError(`Failed to fetch the scope: ${e}`,t));try{if(typeof o!="string")return s(new Error(`Failed to parse the returned scope data: ${e}`));let i=JSON.parse(o);s(null,i)}catch(i){console.error(i),s(new Error(`Failed to parse the returned scope data: ${e}`))}})},this.scopeDelay??0)}authorizationParams(e){let r=super.authorizationParams(e);return"permissions"in e&&(r.permissions=e.permissions),"prompt"in e&&(r.prompt=e.prompt),"disable_guild_select"in e&&(r.disable_guild_select=e.disable_guild_select),"guild_id"in e&&(r.guild_id=e.guild_id),r}};var g=(n=>(n.ActivitiesRead="activities.read",n.ActivitiesWrite="activities.write",n.ApplicationBuildsRead="applications.builds.read",n.ApplicationBuildsUpload="applications.builds.upload",n.ApplicationsCommands="applications.commands",n.ApplicationsCommandsUpdate="applications.commands.update",n.ApplicationsCommandsPermissionsUpdate="applications.commands.permissions.update",n.ApplicationsEntitlements="applications.entitlements",n.ApplicationsStoreUpdate="applications.store.update",n.Bot="bot",n.Connections="connections",n.DmRead="dm_channels.read",n.Email="email",n.GdmJoin="gdm.join",n.Guilds="guilds",n.GuildsJoin="guilds.join",n.GuildMembersRead="guilds.members.read",n.Identify="identify",n.MessagesRead="messages.read",n.RelationshipsRead="relationships.read",n.RoleConnectionsWrite="role_connections.write",n.Rpc="rpc",n.RpcActivitiesUpdate="rpc.activities.update",n.RpcNotificationsRead="rpc.notifications.read",n.RpcVoiceRead="rpc.voice.read",n.RpcVoiceWrite="rpc.voice.write",n.Voice="voice",n.WebhookIncoming="webhook.incoming",n))(g||{});0&&(module.exports={Scope,Strategy});
//# sourceMappingURL=index.js.map