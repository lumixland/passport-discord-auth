var _=Object.defineProperty;var c=(o,e)=>_(o,"name",{value:e,configurable:!0});import{Schema as b}from"builder-validation";import{InternalOAuthError as l,Strategy as y}from"passport-oauth2";var f=class extends y{static{c(this,"Strategy")}name="discord";scope;scopeDelay;fetchScopeEnabled;constructor(e,r){new b().addString({name:"clientId",description:"The client ID assigned by Discord.",required:!0}).addString({name:"clientSecret",description:"The client secret assigned by Discord.",required:!0}).addString({name:"callbackUrl",description:"The URL to which Discord will redirect the user after granting authorization.",required:!0}).addArray({name:"scope",description:"An array of permission scopes to request.",required:!0}).addNumber({name:"scopeDelay",description:"The delay in milliseconds between requests for the same scope.",required:!1}).addBoolean({name:"fetchScope",description:"Whether to fetch data for the specified scope.",required:!1}).addString({name:"authorizationUrl",description:"The base URL for OAuth2 authorization.",required:!1}).addString({name:"tokenUrl",description:"The base URL for OAuth2 token issuance.",required:!1}).addString({name:"scopeSeparator",description:"The separator for the scope values.",required:!1}).validate(e).then(s=>{if(typeof s=="string")throw new Error(s)}),super({clientID:e.clientId,callbackURL:e.callbackUrl,authorizationURL:e.authorizationUrl??"https://discord.com/api/oauth2/authorize",tokenURL:e.tokenUrl??"https://discord.com/api/oauth2/token",scopeSeparator:" ",...e},r),this.scope=e.scope??[],this.scopeDelay=e.scopeDelay??0,this.fetchScopeEnabled=e.fetchScope??!0,this._oauth2.useAuthorizationHeaderforGET(!0)}userProfile(e,r){this._oauth2.get("https://discord.com/api/users/@me",e,(t,s)=>{if(t)return r(new l("Failed to fetch the user profile.",t));let a={};try{if(typeof s!="string")return r(new Error("Failed to parse the user profile."));let i=JSON.parse(s),p=14200704e5,m=1<<22;if(a={provider:"discord",id:i.id,username:i.username,displayName:i.displayName,discriminator:i.discriminator,avatar:i.avatar,banner:i.banner,email:i.email,verified:i.verified,mfa_enabled:i.mfa_enabled,access_token:e,public_flags:i.public_flags,flags:i.flags,locale:i.locale,global_name:i.global_name,premium_type:i.premium_type,connections:i.connections,guilds:i.guilds,fetchedAt:new Date,createdAt:new Date(+i.id/m+p),_raw:s,_json:i},this.fetchScopeEnabled===!1)return r(null,a);this.fetchScope("connections",e,(d,g)=>{if(d)return r(d);a.connections=g,this.fetchScope("guilds",e,(u,h)=>{if(u)return r(u);a.guilds=h,a.fetchedAt=new Date,r(null,a)})})}catch(i){return console.error(i),r(new Error("Failed to parse the user profile."))}})}fetchScope(e,r,t){if(!this.scope.includes(e))return t(null,null);setTimeout(()=>{this._oauth2.get(`https://discord.com/api/users/@me/${e}`,r,(s,a)=>{if(s)return t(new l(`Failed to fetch the scope: ${e}`,s));try{if(typeof a!="string")return t(new Error(`Failed to parse the returned scope data: ${e}`));let i=JSON.parse(a);t(null,i)}catch(i){console.error(i),t(new Error(`Failed to parse the returned scope data: ${e}`))}})},this.scopeDelay??0)}authorizationParams(e){let r=super.authorizationParams(e);return"permissions"in e&&(r.permissions=e.permissions),"prompt"in e&&(r.prompt=e.prompt),"disable_guild_select"in e&&(r.disable_guild_select=e.disable_guild_select),"guild_id"in e&&(r.guild_id=e.guild_id),r}};var v=(n=>(n.ActivitiesRead="activities.read",n.ActivitiesWrite="activities.write",n.ApplicationBuildsRead="applications.builds.read",n.ApplicationBuildsUpload="applications.builds.upload",n.ApplicationsCommands="applications.commands",n.ApplicationsCommandsUpdate="applications.commands.update",n.ApplicationsCommandsPermissionsUpdate="applications.commands.permissions.update",n.ApplicationsEntitlements="applications.entitlements",n.ApplicationsStoreUpdate="applications.store.update",n.Bot="bot",n.Connections="connections",n.DmRead="dm_channels.read",n.Email="email",n.GdmJoin="gdm.join",n.Guilds="guilds",n.GuildsJoin="guilds.join",n.GuildMembersRead="guilds.members.read",n.Identify="identify",n.MessagesRead="messages.read",n.RelationshipsRead="relationships.read",n.RoleConnectionsWrite="role_connections.write",n.Rpc="rpc",n.RpcActivitiesUpdate="rpc.activities.update",n.RpcNotificationsRead="rpc.notifications.read",n.RpcVoiceRead="rpc.voice.read",n.RpcVoiceWrite="rpc.voice.write",n.Voice="voice",n.WebhookIncoming="webhook.incoming",n))(v||{});export{v as Scope,f as Strategy};
//# sourceMappingURL=index.mjs.map