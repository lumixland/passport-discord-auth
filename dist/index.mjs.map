{"version":3,"sources":["../src/Strategy.ts","../src/typings.ts"],"sourcesContent":["import { Schema } from 'builder-validation';\nimport {\n  InternalOAuthError,\n  Strategy as OAuth2Strategy,\n  StrategyOptions as OAuth2StrategyOptions,\n  VerifyCallback,\n} from 'passport-oauth2';\n\nimport {\n  Profile,\n  ProfileConnection,\n  ProfileGuild,\n  ScopeType,\n  SingleScopeType,\n  StrategyOptions,\n} from 'typings';\n\ntype VerifyFunction = (\n  accessToken: string,\n  refreshToken: string,\n  profile: Profile,\n  verified: VerifyCallback\n) => void;\n\ninterface AuthorizationParams {\n  permissions?: string;\n  prompt?: string;\n  disable_guild_select?: string;\n  guild_id?: string;\n}\n\n/**\n * Passport strategy for authenticating with Discord using the OAuth 2.0 API.\n */\nexport class Strategy extends OAuth2Strategy {\n  public override name = 'discord';\n  private scope: ScopeType;\n  private scopeDelay: number;\n  private fetchScopeEnabled: boolean;\n\n  /**\n   * Passport strategy for authenticating with Discord using the OAuth 2.0 API.\n   * @param options The strategy options.\n   * @param verify The verify callback function.\n   * @throws An `Error`. If the options, especially credentials, are not valid.\n   */\n  public constructor(options: StrategyOptions, verify: VerifyFunction) {\n    const constructorSchema = new Schema()\n      .addString({\n        name: 'clientId',\n        description: 'The client ID assigned by Discord.',\n        required: true,\n      })\n      .addString({\n        name: 'clientSecret',\n        description: 'The client secret assigned by Discord.',\n        required: true,\n      })\n      .addString({\n        name: 'callbackUrl',\n        description:\n          'The URL to which Discord will redirect the user after granting authorization.',\n        required: true,\n      })\n      .addArray({\n        name: 'scope',\n        description: 'An array of permission scopes to request.',\n        required: true,\n      })\n      .addNumber({\n        name: 'scopeDelay',\n        description:\n          'The delay in milliseconds between requests for the same scope.',\n        required: false,\n      })\n      .addBoolean({\n        name: 'fetchScope',\n        description: 'Whether to fetch data for the specified scope.',\n        required: false,\n      })\n      .addString({\n        name: 'authorizationUrl',\n        description: 'The base URL for OAuth2 authorization.',\n        required: false,\n      })\n      .addString({\n        name: 'tokenUrl',\n        description: 'The base URL for OAuth2 token issuance.',\n        required: false,\n      })\n      .addString({\n        name: 'scopeSeparator',\n        description: 'The separator for the scope values.',\n        required: false,\n      });\n\n    // Validate the constructor against the schema.\n    constructorSchema\n      .validate(options as unknown as Record<string, unknown>)\n      .then((result) => {\n        if (typeof result === 'string') throw new Error(result);\n      });\n\n    super(\n      {\n        clientID: options.clientId,\n        callbackURL: options.callbackUrl,\n        authorizationURL:\n          options.authorizationUrl ??\n          'https://discord.com/api/oauth2/authorize',\n        tokenURL: options.tokenUrl ?? 'https://discord.com/api/oauth2/token',\n        scopeSeparator: ' ',\n        ...options,\n      } as OAuth2StrategyOptions,\n      verify\n    );\n\n    this.scope = options.scope ?? [];\n    this.scopeDelay = options.scopeDelay ?? 0;\n    this.fetchScopeEnabled = options.fetchScope ?? true;\n\n    this._oauth2.useAuthorizationHeaderforGET(true);\n  }\n\n  /**\n   * Retrieve user profile from Discord.\n   * @param accessToken The access token.\n   * @param done The done callback function.\n   */\n  public override userProfile(\n    accessToken: string,\n    done: (err?: Error | null, profile?: Profile | null) => void\n  ): void {\n    this._oauth2.get(\n      'https://discord.com/api/users/@me',\n      accessToken,\n      (err, body) => {\n        if (err) {\n          return done(\n            new InternalOAuthError('Failed to fetch the user profile.', err)\n          );\n        }\n\n        let profile: Profile = {} as Profile;\n\n        try {\n          if (typeof body !== 'string') {\n            return done(new Error('Failed to parse the user profile.'));\n          }\n\n          const json = JSON.parse(body) as Profile;\n\n          // Discord epoch (2015-01-01T00:00:00.000Z)\n          const EPOCH = 1420070400000;\n\n          // Date is bits 22-63\n          const SHIFT = 1 << 22;\n\n          profile = {\n            provider: 'discord',\n            id: json.id,\n            username: json.username,\n            displayName: json.displayName,\n            discriminator: json.discriminator,\n            avatar: json.avatar,\n            banner: json.banner,\n            email: json.email,\n            verified: json.verified,\n            mfa_enabled: json.mfa_enabled,\n            access_token: accessToken,\n            public_flags: json.public_flags,\n            flags: json.flags,\n            locale: json.locale,\n            global_name: json.global_name,\n            premium_type: json.premium_type,\n            connections: json.connections,\n            guilds: json.guilds,\n            fetchedAt: new Date(),\n            createdAt: new Date(+json.id / SHIFT + EPOCH),\n            _raw: body,\n            _json: json as unknown as Record<string, unknown>,\n          };\n\n          if (this.fetchScopeEnabled === false) return done(null, profile);\n\n          this.fetchScope('connections', accessToken, (err, data) => {\n            if (err) return done(err);\n            profile.connections = data as ProfileConnection[];\n            this.fetchScope('guilds', accessToken, (err, data) => {\n              if (err) return done(err);\n              profile.guilds = data as ProfileGuild[];\n              profile.fetchedAt = new Date();\n              done(null, profile);\n            });\n          });\n        } catch (err) {\n          console.error(err);\n          return done(new Error('Failed to parse the user profile.'));\n        }\n      }\n    );\n  }\n\n  /**\n   * Fetch a scope from Discord.\n   * @param scope The scope to fetch.\n   * @param accessToken The access token.\n   * @param cb The callback function.\n   * @returns The fetched scope data.\n   * @throws An `Error`. If the scope is invalid.\n   */\n  public fetchScope(\n    scope: SingleScopeType,\n    accessToken: string,\n    cb: (err?: Error | null, data?: unknown) => void\n  ): void {\n    if (!this.scope.includes(scope)) return cb(null, null);\n\n    setTimeout(() => {\n      this._oauth2.get(\n        `https://discord.com/api/users/@me/${scope}`,\n        accessToken,\n        (err, body) => {\n          if (err) {\n            return cb(\n              new InternalOAuthError(`Failed to fetch the scope: ${scope}`, err)\n            );\n          }\n\n          try {\n            if (typeof body !== 'string') {\n              return cb(\n                new Error(`Failed to parse the returned scope data: ${scope}`)\n              );\n            }\n\n            const json = JSON.parse(body) as Record<string, unknown>;\n            cb(null, json);\n          } catch (err) {\n            console.error(err);\n            cb(new Error(`Failed to parse the returned scope data: ${scope}`));\n          }\n        }\n      );\n    }, this.scopeDelay ?? 0);\n  }\n\n  /**\n   * Return extra parameters to be included in the authorization request.\n   * @param options The options.\n   * @returns The extra parameters.\n   */\n  public override authorizationParams(\n    options: AuthorizationParams\n  ): AuthorizationParams & Record<string, unknown> {\n    const params: AuthorizationParams & Record<string, unknown> =\n      super.authorizationParams(options) as Record<string, unknown>;\n\n    if ('permissions' in options) {\n      params.permissions = options.permissions;\n    }\n\n    if ('prompt' in options) {\n      params.prompt = options.prompt;\n    }\n\n    if ('disable_guild_select' in options) {\n      params.disable_guild_select = options.disable_guild_select;\n    }\n\n    if ('guild_id' in options) {\n      params.guild_id = options.guild_id;\n    }\n\n    return params;\n  }\n}\n","import passport from 'passport';\nimport {\n  StrategyOptions as OAuth2StrategyOptions,\n  StrategyOptionsWithRequest as OAuth2StrategyOptionsWithRequest,\n} from 'passport-oauth2';\n\n/**\n * See https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-scopes for more information.\n */\nexport enum Scope {\n  /**\n   * Allows your app to fetch data from a user's \"Now Playing/Recently Played\" list â€” not currently available for apps.\n   */\n  ActivitiesRead = 'activities.read',\n  /**\n   * Allows your app to update a user's activity -  not currently available for apps (NOT REQUIRED FOR [GAMESDK ACTIVITY MANAGER](https://discord.com/developers/docs/developer-tools/game-sdk#activities)).\n   */\n  ActivitiesWrite = 'activities.write',\n  /**\n   * Allows your app to read build data for a user's applications.\n   */\n  ApplicationBuildsRead = 'applications.builds.read',\n  /**\n   * Allows your app to upload/update builds for a user's applications - requires Discord approval.\n   */\n  ApplicationBuildsUpload = 'applications.builds.upload',\n  /**\n   * Allows your app to add [commands](https://discord.com/developers/docs/interactions/application-commands) to a guild - included by default with the `bot` scope.\n   */\n  ApplicationsCommands = 'applications.commands',\n  /**\n   * Allows your app to update its [commands](https://discord.com/developers/docs/interactions/application-commands) using a Bearer token - [client credentials grant](https://discord.com/developers/docs/topics/oauth2#client-credentials-grant) only.\n   */\n  ApplicationsCommandsUpdate = 'applications.commands.update',\n  /**\n   * Allows your app to update [permissions for its commands](https://discord.com/developers/docs/interactions/application-commands#permissions) in a guild a user has permissions to.\n   */\n  ApplicationsCommandsPermissionsUpdate = 'applications.commands.permissions.update',\n  /**\n   * Allows your app to read entitlements for a user's applications.\n   */\n  ApplicationsEntitlements = 'applications.entitlements',\n  /**\n   * Allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications.\n   */\n  ApplicationsStoreUpdate = 'applications.store.update',\n  /**\n   * For oauth2 bots, this puts the bot in the user's selected guild by default.\n   */\n  Bot = 'bot',\n  /**\n   * Allows [/users/@me/connections](https://discord.com/developers/docs/resources/user#get-current-user-connections) to return linked third-party accounts.\n   */\n  Connections = 'connections',\n  /**\n   * Allows your app to see information about the user's DMs and group DMs - requires Discord approval.\n   */\n  DmRead = 'dm_channels.read',\n  /**\n   * Enables [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) to return an `email`.\n   */\n  Email = 'email',\n  /**\n   * Allows your app to [join users to a group dm](https://discord.com/developers/docs/resources/channel#group-dm-add-recipient).\n   */\n  GdmJoin = 'gdm.join',\n  /**\n   * Allows [/users/@me/guilds](https://discord.com/developers/docs/resources/user#get-current-user-guilds) to return basic information about all of a user's guilds.\n   */\n  Guilds = 'guilds',\n  /**\n   * Allows [/guilds/{guild.id}/members/{user.id}](https://discord.com/developers/docs/resources/guild#add-guild-member) to be used for joining users to a guild.\n   */\n  GuildsJoin = 'guilds.join',\n  /**\n   * Allows [/users/@me/guilds/{guild.id}/member](https://discord.com/developers/docs/resources/user#get-current-user-guild-member) to return a user's member information in a guild.\n   */\n  GuildMembersRead = 'guilds.members.read',\n  /**\n   * Allows [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) without `email`.\n   */\n  Identify = 'identify',\n  /**\n   * For local rpc server api access, this allows you to read messages from all client channels (otherwise restricted to channels/guilds your app creates).\n   */\n  MessagesRead = 'messages.read',\n  /**\n   * Allows your app to know a user's friends and implicit relationships - requires Discord approval.\n   */\n  RelationshipsRead = 'relationships.read',\n  /**\n   * Allows your app to update a user's connection and metadata for the app.\n   */\n  RoleConnectionsWrite = 'role_connections.write',\n  /**\n   * For local rpc server access, this allows you to control a user's local Discord client - requires Discord approval.\n   */\n  Rpc = 'rpc',\n  /**\n   * For local rpc server access, this allows you to update a user's activity - requires Discord approval.\n   */\n  RpcActivitiesUpdate = 'rpc.activities.update',\n  /**\n   * For local rpc server access, this allows you to receive notifications pushed out to the user - requires Discord approval.\n   */\n  RpcNotificationsRead = 'rpc.notifications.read',\n  /**\n   * For local rpc server access, this allows you to read a user's voice settings and listen for voice events - requires Discord approval.\n   */\n  RpcVoiceRead = 'rpc.voice.read',\n  /**\n   * For local rpc server access, this allows you to update a user's voice settings - requires Discord approval.\n   */\n  RpcVoiceWrite = 'rpc.voice.write',\n  /**\n   * Allows your app to connect to voice on user's behalf and see all the voice members - requires Discord approval.\n   */\n  Voice = 'voice',\n  /**\n   * This generates a webhook that is returned in the oauth token response for authorization code grants.\n   */\n  WebhookIncoming = 'webhook.incoming',\n}\n\nexport type SingleScopeType = `${Scope}`;\nexport type ScopeType = SingleScopeType[];\n\ntype MergedOAuth2StrategyOptions =\n  | OAuth2StrategyOptions\n  | OAuth2StrategyOptionsWithRequest;\n\nexport interface StrategyOptions\n  extends Omit<\n    MergedOAuth2StrategyOptions,\n    'clientID' | 'clientSecret' | 'scope' | 'authorizationURL' | 'tokenURL'\n  > {\n  /**\n   * The client ID assigned by Discord.\n   */\n  clientId: string;\n  /**\n   * The client secret assigned by Discord.\n   */\n  clientSecret: string;\n  /**\n   * The URL to which Discord will redirect the user after granting authorization.\n   */\n  callbackUrl: string;\n  /**\n   * An array of permission scopes to request.\n   */\n  scope: ScopeType;\n  /**\n   * The delay in milliseconds between requests for the same scope.\n   */\n  scopeDelay?: number | undefined;\n  /**\n   * Whether to fetch data for the specified scope.\n   */\n  fetchScope?: boolean | undefined;\n  /**\n   * The base URL for OAuth2 authorization.\n   */\n  authorizationUrl?: string | undefined;\n  /**\n   * The base URL for OAuth2 token issuance.\n   */\n  tokenUrl?: string | undefined;\n  /**\n   * The separator for the scope values.\n   */\n  scopeSeparator?: string | undefined;\n}\n\n/**\n * See https://discord.com/developers/docs/resources/user#user-object for more information.\n */\nexport interface DiscordUser {\n  /**\n   * The user's Discord ID.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/reference#snowflakes\n   * @example '896657711104667719'\n   */\n  id: string;\n  /**\n   * The user's username, not unique across the platform.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example 'slekup'\n   */\n  username: string;\n  /**\n   * The user's 4-digit discord-tag.This is currently being replaced by the pomelo username system.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example 'slekup'\n   */\n  discriminator?: string | undefined; // TODO: Remove this when Discord removes it from their API.\n  /**\n   * The user's display name, if it is set. For bots, this is it's application name.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example 'Slekup'\n   */\n  global_name?: string | undefined;\n  /**\n   * The user's avatar hash.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/reference#image-formatting\n   * @example 'a_6de1eeba46e97e2ca9e2fgb1ae99c2b6'\n   */\n  avatar: string;\n  /**\n   * Whether the user belongs to an OAuth2 application.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example false\n   */\n  bot?: string | undefined;\n  /**\n   * Whether the user is an Official Discord System user (part of the urgent message system).\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example false\n   */\n  system?: boolean | undefined;\n  /**\n   * Whether the user has two factor enabled on their account.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example false\n   */\n  mfa_enabled?: boolean | undefined;\n  /**\n   * The user's banner hash.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example 'a_6de1eeba36e97e2cf9e2fgb1ae99c2b3'\n   */\n  banner?: string | undefined;\n  /**\n   * The user's banner color encoded as an integer representation of hexadecimal color code.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example 0\n   */\n  accent_color?: number | undefined;\n  /**\n   * The user's chosen language option.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example 'en-US'\n   */\n  locale?: string | undefined;\n  /**\n   * Whether the email on this account has been verified.\n   * Required scope: `email`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example true\n   */\n  verified?: boolean | undefined;\n  /**\n   * The user's email.\n   * Required scope: `email`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example user@example.com\n   */\n  email?: string | undefined;\n  /**\n   * The flags on a user's account.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example 0\n   */\n  flags?: number | undefined;\n  /**\n   * The type of Nitro subscription on a user's account.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example 0\n   */\n  premium_type?: number | undefined;\n  /**\n   * The public flags on a user's account.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example 0\n   */\n  public_flags?: number | undefined;\n  /**\n   * Data for the user's avatar decoration.\n   * Required scope: `identify`.\n   * @see https://discord.com/developers/docs/resources/user#avatar-decoration-data-object\n   */\n  avatar_decoration_data?: AvatarDecorationData | undefined;\n}\n\nexport interface AvatarDecorationData {\n  /**\n   * The [avatar decoration hash](https://discord.com/developers/docs/reference#image-formatting).\n   */\n  asset: string;\n  /**\n   * ID of the avatar decoration's SKU.\n   * @see https://discord.com/developers/docs/reference#snowflakes\n   * @example '896657711104667719'\n   */\n  sku_id: string;\n}\n\nexport interface DiscordAccount {\n  /**\n   * The id of the account.\n   */\n  id: string;\n  /**\n   * The name of the account.\n   */\n  name: string;\n}\n\nexport interface DiscordApplication {\n  /**\n   * The ID of the application.\n   */\n  id: string;\n  /**\n   * The name of the application.\n   */\n  name: string;\n  /**\n   * The icon [hash](https://discord.com/developers/docs/reference#image-formatting) of the application.\n   */\n  icon?: string | undefined;\n  /**\n   * The description of the application.\n   */\n  description: string;\n  /**\n   * The bot associated with this application.\n   */\n  bot?: DiscordUser;\n}\n\nexport interface DiscordIntegration {\n  /**\n   * Integration id.\n   */\n  id: string;\n  /**\n   * Integration name.\n   */\n  name: string;\n  /**\n   * Integration type (twitch, youtube, or discord).\n   */\n  type: string;\n  /**\n   * Is this integration enabled.\n   */\n  enabled: boolean;\n  /**\n   * Is this integration syncing.\n   */\n  syncing?: boolean | undefined;\n  /**\n   * ID that this integration uses for \"subscribers\".\n   */\n  role_id?: string | undefined;\n  /**\n   * Whether emoticons should be synced for this integration (twitch only currently).\n   */\n  enable_emoticons?: boolean | undefined;\n  /**\n   * The behavior of expiring subscribers.\n   */\n  expire_behavior?: number | undefined;\n  /**\n   * The grace period (in days) before expiring subscribers.\n   */\n  expire_grace_period?: number | undefined;\n  /**\n   * User for this integration.\n   */\n  user?: DiscordUser | undefined;\n  /**\n   * Integration account information.\n   */\n  account: DiscordAccount;\n  /**\n   * When this integration was last synced.\n   */\n  synced_at?: Date | undefined;\n  /**\n   * How many subscribers this integration has.\n   */\n  subscriber_count?: number | undefined;\n  /**\n   * Has this integration been revoked.\n   */\n  revoked?: boolean | undefined;\n  /**\n   * The bot/OAuth2 application for discord integrations.\n   */\n  application?: DiscordApplication | undefined;\n  /**\n   * The scopes the application has been authorized for.\n   */\n  scopes?: ScopeType | undefined;\n}\n\nexport interface ProfileConnection {\n  /**\n   * The id of the connection account.\n   */\n  id: string;\n  /**\n   * The username of the connection account.\n   */\n  name: string;\n  /**\n   * The [service](https://discord.com/developers/docs/resources/user#connection-object-services) of the connection (twitch, youtube).\n   */\n  type: string;\n  /**\n   * Whether the connection is revoked.\n   */\n  revoked?: boolean | undefined;\n  /**\n   * An array of partial [server integrations](https://discord.com/developers/docs/resources/guild#integration-object).\n   */\n  integrations?: DiscordIntegration[] | undefined;\n  /**\n   * Whether the connection is verified.\n   */\n  verified: boolean;\n  /**\n   * Whether friend sync is enabled for this connection.\n   */\n  friend_sync: boolean;\n  /**\n   * Whether activities related to this connection will be shown in presence updates.\n   */\n  show_activity: boolean;\n  /**\n   * Whether this connection has a corresponding third party OAuth2 token.\n   */\n  two_way_link: boolean;\n  /**\n   * The [visibility](https://discord.com/developers/docs/resources/user#connection-object-visibility-types) of this connection.\n   */\n  visibility: number;\n}\n\nexport interface DiscordRoleTag {\n  /**\n   * The id of the bot this role belongs to.\n   */\n  bot_id?: string | undefined;\n  /**\n   * The id of the integration this role belongs to.\n   */\n  integration_id?: string | undefined;\n  /**\n   * Whether this is the guild's booster role.\n   */\n  premium_subscriber?: null | undefined;\n  /**\n   * The id of this role's subscription sku and listing.\n   */\n  subscription_listing_id?: string | undefined;\n  /**\n   * Whether this role is available for purchase.\n   */\n  available_for_purchase?: null | undefined;\n  /**\n   * Whether this role is a guild's linked role.\n   */\n  guild_connections?: null | undefined;\n}\n\nexport interface DiscordRole {\n  /**\n   * The id of the role.\n   */\n  id: string;\n  /**\n   * The name of the role.\n   */\n  name: string;\n  /**\n   * The color of the role.\n   */\n  color: number;\n  /**\n   * Whether the role is hoisted.\n   */\n  hoist: boolean;\n  /**\n   * The position of the role.\n   */\n  icon?: string | undefined;\n  /**\n   * The unicode emoji for the role.\n   */\n  unicode_emoji?: string | undefined;\n  /**\n   * The id of the role's guild.\n   */\n  position: number;\n  /**\n   * The permissions of the role.\n   */\n  permissions: string;\n  /**\n   * Whether the role is managed.\n   */\n  managed: boolean;\n  /**\n   * Whether the role is mentionable.\n   */\n  mentionable: boolean;\n  /**\n   * The tags this role has.\n   */\n  tags?: DiscordRoleTag | undefined;\n  /**\n   * The permissions of the role.\n   */\n  flags: number;\n}\n\nexport interface DiscordEmoji {\n  /**\n   * The emoji's id.\n   */\n  id: string | undefined;\n  /**\n   * The emoji's name.\n   */\n  name: string | undefined;\n  /**\n   * Whether this emoji is animated.\n   */\n  roles: string[] | undefined;\n  /**\n   * The user that created this emoji.\n   */\n  user?: DiscordUser | undefined;\n  /**\n   * Whether this emoji must be wrapped in colons.\n   */\n  require_colons?: boolean | undefined;\n  /**\n   * Whether this emoji is managed.\n   */\n  managed?: boolean | undefined;\n  /**\n   * Whether this emoji is animated.\n   */\n  animated?: boolean | undefined;\n  /**\n   * Whether this emoji can be used, may be false due to loss of Server Boosts.\n   */\n  available?: boolean | undefined;\n}\n\nexport interface DiscordWelcomeScreenChannel {\n  /**\n   * The channel's id.\n   */\n  channel_id: string;\n  /**\n   * The description shown for the channel.\n   */\n  description: string;\n  /**\n   * The emoji id, if the emoji is custom.\n   */\n  emoji_id?: string | undefined;\n  /**\n   * The emoji name if custom, the unicode character if standard, or null if no emoji is set.\n   */\n  emoji_name?: string | undefined;\n}\n\nexport interface DiscordWelcomeScreen {\n  /**\n   * The server description shown in the welcome screen.\n   */\n  description?: string | undefined;\n  /**\n   * The channels shown in the welcome screen, up to 5.\n   */\n  welcome_channels: DiscordWelcomeScreenChannel[];\n}\n\nexport interface DiscordSticker {\n  /**\n   * The id of the sticker.\n   */\n  id: string;\n  /**\n   * For standard stickers, id of the pack the sticker is from.\n   */\n  pack_id?: string | undefined;\n  /**\n   * Name of the sticker.\n   */\n  name: string;\n  /**\n   * Description of the sticker.\n   */\n  description: string;\n  /**\n   * Autocomplete/suggestion tags for the sticker (max 200 characters).\n   */\n  tags: string;\n  /**\n   * The sticker asset hash.\n   * @deprecated\n   */\n  asset?: string | undefined;\n  /**\n   * The type of sticker.\n   */\n  type: number;\n  /**\n   * The format type of sticker.\n   */\n  format_type: number;\n  /**\n   * Whether this guild sticker can be used, may be false due to loss of Server Boosts.\n   */\n  available?: boolean | undefined;\n  /**\n   * The id of the guild that owns this sticker.\n   */\n  guild_id?: string | undefined;\n  /**\n   * The user that uploaded the guild sticker.\n   */\n  user?: DiscordUser | undefined;\n  /**\n   * A sticker's sort order within a pack.\n   */\n  sort_value?: number | undefined;\n}\n\nexport interface ProfileGuild {\n  /**\n   * The id of the guild.\n   */\n  id: string;\n  /**\n   * The name of the guild.\n   */\n  name: string;\n  /**\n   * The icon hash of the guild.\n   */\n  icon?: string | undefined;\n  /**\n   * Icon hash, returned when in the template object.\n   */\n  icon_hash?: string | undefined;\n  /**\n   * The splash hash of the guild.\n   */\n  splash?: string | undefined;\n  /**\n   * Discovery splash hash.\n   */\n  discovery_splash?: string | undefined;\n  /**\n   * True if the user is the owner of the guild.\n   */\n  owner?: boolean | string;\n  /**\n   * The id of the guild owner.\n   */\n  owner_id: string;\n  /**\n   * The permissions of the user in the guild (excludes overwrites and implicit permissions).\n   */\n  permissions?: string | undefined;\n  /**\n   * Voice region id for the guild.\n   * @deprecated\n   */\n  region?: string | undefined;\n  /**\n   * The id of the afk channel.\n   */\n  afk_channel_id?: string | undefined;\n  /**\n   * The afk timeout in seconds.\n   */\n  afk_timeout?: number | undefined;\n  /**\n   * True if the server widget is enabled.\n   */\n  widget_enabled: boolean | undefined;\n  /**\n   * The channel id that the widget will generate an invite to, or null if set to no invite.\n   */\n  widget_channel_id?: string | undefined;\n  /**\n   * The verification level required for the guild.\n   */\n  verification_level?: number | undefined;\n  /**\n   * The default message notifications level.\n   */\n  default_message_notifications?: number | undefined;\n  /**\n   * The explicit content filter level.\n   */\n  explicit_content_filter?: number | undefined;\n  /**\n   * The roles in the guild.\n   */\n  roles: DiscordRole[];\n  /**\n   * The emojis in the guild.\n   */\n  emojis: DiscordEmoji[];\n  /**\n   * Enabled guild features.\n   */\n  features: string[];\n  /**\n   * Required MFA level for the guild.\n   */\n  mfa_level?: number | undefined;\n  /**\n   * The application id of the guild creator if it is bot-created.\n   */\n  application_id?: string | undefined;\n  /**\n   * The id of the channel where guild notices such as welcome messages and boost events are posted.\n   */\n  system_channel_id?: string | undefined;\n  /**\n   * The system channel flags.\n   */\n  system_channel_flags?: number | undefined;\n  /**\n   * The id of the channel where Community guilds can display rules and/or guidelines.\n   */\n  rules_channel_id?: string | undefined;\n  /**\n   * The maximum number of presences for the guild (null is always returned, apart from the largest of guilds).\n   */\n  max_presences?: number | undefined;\n  /**\n   * The maximum number of members for the guild.\n   */\n  max_members?: number | undefined;\n  /**\n   * The vanity url code for the guild.\n   */\n  vanity_url_code?: string | undefined;\n  /**\n   * The description of a guild.\n   */\n  description?: string | undefined;\n  /**\n   * Banner hash.\n   */\n  banner?: string | undefined;\n  /**\n   * Premium tier (Server Boost level).\n   */\n  premium_tier?: number | undefined;\n  /**\n   * The number of boosts this guild currently has.\n   */\n  premium_subscription_count?: number | undefined;\n  /**\n   * The preferred locale of a Community guild; used in server discovery and notices from Discord; defaults to \"en-US\".\n   */\n  preferred_locale?: string | undefined;\n  /**\n   * The id of the channel where admins and moderators of Community guilds receive notices from Discord.\n   */\n  public_updates_channel_id?: string | undefined;\n  /**\n   * The maximum amount of users in a video channel.\n   */\n  max_video_channel_users?: number | undefined;\n  /**\n   * The maximum amount of users in a stage video channel.\n   */\n  max_stage_video_channel_users?: number | undefined;\n  /**\n   * Approximate number of members in this guild, returned from the GET /guilds/<id> and /users/@me/guilds endpoints when with_counts is true.\n   */\n  approximate_member_count?: number | undefined;\n  /**\n   * Approximate number of non-offline members in this guild, returned from the GET /guilds/<id> and /users/@me/guilds endpoints when with_counts is true.\n   */\n  approximate_presence_count?: number | undefined;\n  /**\n   * The welcome screen of a Community guild, shown to new members, returned in an Invite's guild object.\n   */\n  welcome_screen?: DiscordWelcomeScreen | undefined;\n  /**\n   * The NSFW level of the guild.\n   */\n  nsfw_level?: number | undefined;\n  /**\n   * The custom guild stickers.\n   */\n  stickers?: DiscordSticker[] | undefined;\n  /**\n   * Whether the guild has the boost progress bar enabled.\n   */\n  premium_progress_bar_enabled?: boolean | undefined;\n  /**\n   * The id of the channel where admins and moderators of Community guilds receive safety alerts from Discord.\n   */\n  safety_alerts_channel_id?: string | undefined;\n}\n\nexport interface Profile\n  extends Omit<passport.Profile, 'username'>,\n    DiscordUser {\n  /**\n   * The provider that issued the profile. Set to `discord`.\n   */\n  provider: string;\n  /**\n   * An array of connection objects.\n   * Required scope: `connections`.\n   * @see https://discord.com/developers/docs/resources/user#connection-object-connection-structure\n   * @example [{ verified: true, name: 'Spotify', show_activity: true, type: 'spotify', id: '1234567890', visibility: 1 }]\n   */\n  connections?: ProfileConnection[] | undefined;\n  /**\n   * An array of guild objects the user is a member of.\n   * Required scope: `guilds`.\n   * @see https://discord.com/developers/docs/resources/user#user-object-user-structure\n   * @example [{ owner: true, permissions: 2147483647, icon: 'a_6de1eeba46e97e2ca9e2fgb1ae99c2b6', id: '1234567890', name: 'Discord Developers', features: ['ANIMATED_ICON', 'BANNER', 'COMMERCE', 'COMMUNITY', 'DISCOVERABLE', 'FEATURABLE', 'INVITE_SPLASH', 'MEMBER_VERIFICATION_GATE_ENABLED', 'NEWS', 'PARTNERED', 'PREVIEW_ENABLED', 'VANITY_URL', 'VERIFIED', 'VIP_REGIONS', 'WELCOME_SCREEN_ENABLED'], permissions_new: '2147483647' }]\n   */\n  guilds?: ProfileGuild[] | undefined;\n  /**\n   * The access token used to access the Discord API on the user's behalf.\n   * @example 'mfa.1234567890'\n   */\n  access_token: string;\n  /**\n   * The time the user's data was fetched.\n   * @example 2023-01-01T18:00:00.000Z\n   */\n  fetchedAt: Date;\n  /**\n   * The time the user's account was created. This is derived from the user's ID.\n   * @example 2023-01-01T18:00:00.000Z\n   */\n  createdAt: Date;\n  /**\n   * The raw data from Discord.\n   */\n  _raw: unknown;\n  /**\n   * The raw data from Discord, parsed into a JSON object.\n   */\n  _json: Record<string, unknown>;\n}\n"],"mappings":"+EAAA,OAAS,UAAAA,MAAc,qBACvB,OACE,sBAAAC,EACA,YAAYC,MAGP,kBA4BA,IAAMC,EAAN,cAAuBC,CAAe,CAlC7C,MAkC6C,CAAAC,EAAA,iBAC3B,KAAO,UACf,MACA,WACA,kBAQD,YAAYC,EAA0BC,EAAwB,CACzC,IAAIC,EAAO,EAClC,UAAU,CACT,KAAM,WACN,YAAa,qCACb,SAAU,EACZ,CAAC,EACA,UAAU,CACT,KAAM,eACN,YAAa,yCACb,SAAU,EACZ,CAAC,EACA,UAAU,CACT,KAAM,cACN,YACE,gFACF,SAAU,EACZ,CAAC,EACA,SAAS,CACR,KAAM,QACN,YAAa,4CACb,SAAU,EACZ,CAAC,EACA,UAAU,CACT,KAAM,aACN,YACE,iEACF,SAAU,EACZ,CAAC,EACA,WAAW,CACV,KAAM,aACN,YAAa,iDACb,SAAU,EACZ,CAAC,EACA,UAAU,CACT,KAAM,mBACN,YAAa,yCACb,SAAU,EACZ,CAAC,EACA,UAAU,CACT,KAAM,WACN,YAAa,0CACb,SAAU,EACZ,CAAC,EACA,UAAU,CACT,KAAM,iBACN,YAAa,sCACb,SAAU,EACZ,CAAC,EAIA,SAASF,CAA6C,EACtD,KAAMG,GAAW,CAChB,GAAI,OAAOA,GAAW,SAAU,MAAM,IAAI,MAAMA,CAAM,CACxD,CAAC,EAEH,MACE,CACE,SAAUH,EAAQ,SAClB,YAAaA,EAAQ,YACrB,iBACEA,EAAQ,kBACR,2CACF,SAAUA,EAAQ,UAAY,uCAC9B,eAAgB,IAChB,GAAGA,CACL,EACAC,CACF,EAEA,KAAK,MAAQD,EAAQ,OAAS,CAAC,EAC/B,KAAK,WAAaA,EAAQ,YAAc,EACxC,KAAK,kBAAoBA,EAAQ,YAAc,GAE/C,KAAK,QAAQ,6BAA6B,EAAI,CAChD,CAOgB,YACdI,EACAC,EACM,CACN,KAAK,QAAQ,IACX,oCACAD,EACA,CAACE,EAAKC,IAAS,CACb,GAAID,EACF,OAAOD,EACL,IAAIG,EAAmB,oCAAqCF,CAAG,CACjE,EAGF,IAAIG,EAAmB,CAAC,EAExB,GAAI,CACF,GAAI,OAAOF,GAAS,SAClB,OAAOF,EAAK,IAAI,MAAM,mCAAmC,CAAC,EAG5D,IAAMK,EAAO,KAAK,MAAMH,CAAI,EAGtBI,EAAQ,WAGRC,EAAQ,GAAK,GA2BnB,GAzBAH,EAAU,CACR,SAAU,UACV,GAAIC,EAAK,GACT,SAAUA,EAAK,SACf,YAAaA,EAAK,YAClB,cAAeA,EAAK,cACpB,OAAQA,EAAK,OACb,OAAQA,EAAK,OACb,MAAOA,EAAK,MACZ,SAAUA,EAAK,SACf,YAAaA,EAAK,YAClB,aAAcN,EACd,aAAcM,EAAK,aACnB,MAAOA,EAAK,MACZ,OAAQA,EAAK,OACb,YAAaA,EAAK,YAClB,aAAcA,EAAK,aACnB,YAAaA,EAAK,YAClB,OAAQA,EAAK,OACb,UAAW,IAAI,KACf,UAAW,IAAI,KAAK,CAACA,EAAK,GAAKE,EAAQD,CAAK,EAC5C,KAAMJ,EACN,MAAOG,CACT,EAEI,KAAK,oBAAsB,GAAO,OAAOL,EAAK,KAAMI,CAAO,EAE/D,KAAK,WAAW,cAAeL,EAAa,CAACE,EAAKO,IAAS,CACzD,GAAIP,EAAK,OAAOD,EAAKC,CAAG,EACxBG,EAAQ,YAAcI,EACtB,KAAK,WAAW,SAAUT,EAAa,CAACE,EAAKO,IAAS,CACpD,GAAIP,EAAK,OAAOD,EAAKC,CAAG,EACxBG,EAAQ,OAASI,EACjBJ,EAAQ,UAAY,IAAI,KACxBJ,EAAK,KAAMI,CAAO,CACpB,CAAC,CACH,CAAC,CACH,OAASH,EAAK,CACZ,eAAQ,MAAMA,CAAG,EACVD,EAAK,IAAI,MAAM,mCAAmC,CAAC,CAC5D,CACF,CACF,CACF,CAUO,WACLS,EACAV,EACAW,EACM,CACN,GAAI,CAAC,KAAK,MAAM,SAASD,CAAK,EAAG,OAAOC,EAAG,KAAM,IAAI,EAErD,WAAW,IAAM,CACf,KAAK,QAAQ,IACX,qCAAqCD,CAAK,GAC1CV,EACA,CAACE,EAAKC,IAAS,CACb,GAAID,EACF,OAAOS,EACL,IAAIP,EAAmB,8BAA8BM,CAAK,GAAIR,CAAG,CACnE,EAGF,GAAI,CACF,GAAI,OAAOC,GAAS,SAClB,OAAOQ,EACL,IAAI,MAAM,4CAA4CD,CAAK,EAAE,CAC/D,EAGF,IAAMJ,EAAO,KAAK,MAAMH,CAAI,EAC5BQ,EAAG,KAAML,CAAI,CACf,OAASJ,EAAK,CACZ,QAAQ,MAAMA,CAAG,EACjBS,EAAG,IAAI,MAAM,4CAA4CD,CAAK,EAAE,CAAC,CACnE,CACF,CACF,CACF,EAAG,KAAK,YAAc,CAAC,CACzB,CAOgB,oBACdd,EAC+C,CAC/C,IAAMgB,EACJ,MAAM,oBAAoBhB,CAAO,EAEnC,MAAI,gBAAiBA,IACnBgB,EAAO,YAAchB,EAAQ,aAG3B,WAAYA,IACdgB,EAAO,OAAShB,EAAQ,QAGtB,yBAA0BA,IAC5BgB,EAAO,qBAAuBhB,EAAQ,sBAGpC,aAAcA,IAChBgB,EAAO,SAAWhB,EAAQ,UAGrBgB,CACT,CACF,EC3QO,IAAKC,OAIVA,EAAA,eAAiB,kBAIjBA,EAAA,gBAAkB,mBAIlBA,EAAA,sBAAwB,2BAIxBA,EAAA,wBAA0B,6BAI1BA,EAAA,qBAAuB,wBAIvBA,EAAA,2BAA6B,+BAI7BA,EAAA,sCAAwC,2CAIxCA,EAAA,yBAA2B,4BAI3BA,EAAA,wBAA0B,4BAI1BA,EAAA,IAAM,MAINA,EAAA,YAAc,cAIdA,EAAA,OAAS,mBAITA,EAAA,MAAQ,QAIRA,EAAA,QAAU,WAIVA,EAAA,OAAS,SAITA,EAAA,WAAa,cAIbA,EAAA,iBAAmB,sBAInBA,EAAA,SAAW,WAIXA,EAAA,aAAe,gBAIfA,EAAA,kBAAoB,qBAIpBA,EAAA,qBAAuB,yBAIvBA,EAAA,IAAM,MAINA,EAAA,oBAAsB,wBAItBA,EAAA,qBAAuB,yBAIvBA,EAAA,aAAe,iBAIfA,EAAA,cAAgB,kBAIhBA,EAAA,MAAQ,QAIRA,EAAA,gBAAkB,mBAhHRA,OAAA","names":["Schema","InternalOAuthError","OAuth2Strategy","Strategy","OAuth2Strategy","__name","options","verify","Schema","result","accessToken","done","err","body","InternalOAuthError","profile","json","EPOCH","SHIFT","data","scope","cb","params","Scope"]}